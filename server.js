// Generated by LiveScript 1.2.0
(function(){
  var express, http, mongoose, config, tweets, worker, allowCrossDomain, passwordAuthenticate, app;
  if (process.env.NODETIME_ACCOUNT_KEY) {
    require('nodetime').profile({
      accountKey: process.env.NODETIME_ACCOUNT_KEY,
      appName: 'TweetWorker'
    });
  }
  express = require('express');
  http = require('http');
  mongoose = require('mongoose');
  config = require('./config');
  console.log(config);
  tweets = require('./routes/tweets');
  config = require('./config');
  worker = require('./worker');
  process.on('uncaughtException', function(err){
    console.log('Caught exception: ', err);
  });
  mongoose.connect(config.mongo.url);
  allowCrossDomain = function(req, res, next){
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type,X-Requested-With');
    next();
  };
  passwordAuthenticate = function(req, res, next){
    if (req.query && req.query.auth_token === config.auth.token) {
      next();
    } else {
      console.log("auth error!");
      console.log(req.query);
      res.send(401, "not authenticated");
    }
  };
  app = express();
  app.configure(function(){
    app.set('port', process.env.PORT || 5000);
    app.use(express.favicon());
    app.use(express.logger('dev'));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(allowCrossDomain);
    app.use(passwordAuthenticate);
    app.use(app.router);
  });
  app.configure('development', function(){
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });
  app.get('/tweets', tweets.index);
  app.put('/tweets', tweets.update);
  app.post('/tweets', tweets.create);
  app.get('/', function(req, res){
    res.json(200, {
      message: 'authenticated'
    });
  });
  http.createServer(app).listen(app.get('port'), function(){
    console.log("Express server listening on port %s in %s mode.", app.get('port'), app.settings.env);
  });
  worker.register();
}).call(this);
